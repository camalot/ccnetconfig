/*
 * Copyright (c) 2006, Ryan Conrad. All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 * - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 * 
 * - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the 
 *    documentation and/or other materials provided with the distribution.
 * 
 * - Neither the name of the Camalot Designs nor the names of its contributors may be used to endorse or promote products derived from this software 
 *    without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT 
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH 
 * DAMAGE.
 */
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Xml;
using CCNetConfig.Core;
using System.ComponentModel;
using CCNetConfig.Core.Components;
using System.Drawing.Design;

namespace CCNetConfig.CCNet {
  /// <summary>
  /// 
  /// The <see cref="CCNetConfig.CCNet.ExecutableTask">ExecutableTask</see> lets you invoke any command line executable. It doesn't offer as much 
  /// specific integration as (for example) the <see cref="CCNetConfig.CCNet.NAntTask">NAntTask</see>, but does allow you to hook almost 
  /// anything up as a build process to <a href="http://confluence.public.thoughtworks.org/display/CCNET/">CCNet</a>.
  /// 
  /// </summary>
  /// <remarks>
  /// <p>The following parameters are passed to the external program using environment variables:</p>
  /// <table>
  /// <tbody><tr>
  /// <th> Label </th>
  /// <th> Description </th>
  /// <th> Example </th>
  /// </tr>
  /// <tr>
  /// <td> CCNetBuildCondition </td>
  /// <td> The condition used to trigger the build,
  /// indicating if the build was triggered by new modifications or if it was
  /// forced. Legal values are: "IfModificationExists" or "ForceBuild" </td>
  /// <td > ForceBuild </td>
  /// </tr>
  /// <tr>
  /// <td> CCNetIntegrationStatus </td>
  /// <td> The status of the current integration. Could be Success, Failure, Exception or Unknown  </td>
  /// <td> Success </td>
  /// </tr>
  /// <tr>
  /// <td> CCNetLabel </td>
  /// <td> The label used to identify the CCNet build.  This label is generated by the CCNet labeller. </td>
  /// <td> 1.0.2.120 </td>
  /// </tr>
  /// <tr>
  /// <td> CCNetLastIntegrationStatus </td>
  /// <td> The status of the previous integration. Could be Success, Failure, Exception or Unknown  </td>
  /// <td> Success </td>
  /// </tr>
  /// <tr>
  /// <td> CCNetProject </td>
  /// <td> The name of the CCNet project that is being integrated. </td>
  /// <td> MyProject </td>
  /// </tr>
  /// <tr>
  /// <td> CCNetBuildDate </td>
  /// <td> The date of the build (in yyyy-MM-dd format) </td>
  /// <td> 2005-08-10 </td>
  /// </tr>
  /// <tr>
  /// <td> CCNetBuildTime </td>
  /// <td> The time of the start of the build (in HH:mm:ss format) </td>
  /// <td> 08:45:12 </td>
  /// </tr>
  /// <tr>
  /// <td> CCNetArtifactDirectory </td>
  /// <td> The <a href="http://confluence.public.thoughtworks.org/display/CCNET/Project+Configuration+Block#ProjectConfigurationBlock-artifactDirectory" title="artifactDirectory on Project Configuration Block">project artifact directory</a> </td>
  /// <td> <tt>c:\program files\CruiseControl.NET\Server\MyProject\Artifacts</tt></td>
  /// </tr>
  /// <tr>
  /// <td> CCNetWorkingDirectory </td>
  /// <td> The <a href="http://confluence.public.thoughtworks.org/display/CCNET/Project+Configuration+Block#ProjectConfigurationBlock-workingDirectory" title="workingDirectory on Project Configuration Block">project working directory</a> </td>
  /// <td> <tt>c:\program files\CruiseControl.NET\Server\MyProject\WorkingDirectory</tt></td>
  /// </tr>
  /// <tr>
  /// <td>CCNetRequestSource</td>
  /// <td>The source of the integration request; this will generally be the name of the trigger that raised the request. (Added in CCNet 1.1)</td>
  /// <td>IntervalTrigger</td></tr></tbody></table>
  /// <br />
  /// see <a href="http://confluence.public.thoughtworks.org/display/CCNET/Executable+Task">Executable Task</a> for more info.
  /// </remarks>
  [ MinimumVersion( "1.0" ) ]
  public class ExecutableTask : PublisherTask, ICCNetDocumentation {
    private string _exe = null;
    private string _baseDir = null;
    private string _args = string.Empty;
    private int? _buildTimeoutSeconds = null;

    /// <summary>
    /// Initializes a new instance of the <see cref="ExecutableTask"/> class.
    /// </summary>
    public ExecutableTask() : base ("exec") { }
    /// <summary>
    /// The path of the program to run. 
    /// If this is relative, then must be relative to either 
    ///   <ol>
    ///     <li>the base directory</li>
    ///     <li>the <a href="http://confluence.public.thoughtworks.org/display/CCNET/">CCNet</a> Server application</li>
    ///     <li>if the path doesn't contain any directory details then can be available in the system or application's 'path' environment variable.</li>/para>
    ///   </ol>
    /// </summary>
    [Description ("The path of the program to run.\nIf this is relative, then must be relative to either\n\tthe base directory\n\tthe CCNet Server " +
    "application\n\tif the path doesn't contain any directory details then can be available in the system or application's 'path' environment variable."),
   DefaultValue ( null ), DisplayName ( "(Executable)" ), Category ( "Required" ),
    Editor(typeof(OpenFileDialogUIEditor),typeof(UITypeEditor)),FileTypeFilter("Executables|*.exe;*.bat;*.com|All Files|*.*"),
    OpenFileDialogTitle("Select program to run.")]
    public string Executable { get { return this._exe; } set { this._exe = Util.CheckRequired (this, "executable", value); } }
    /// <summary>
    /// The directory to run the process in. If relative, is a subdirectory of the <see cref="CCNetConfig.Core.Project.WorkingDirectory">Project Working Directory</see>
    /// </summary>
    [Description ( "The directory to run the process in. If relative, is a subdirectory of the Project Working Directory." ), DefaultValue ( null ),
   Category ( "Optional" ),
 Editor ( typeof ( BrowseForFolderUIEditor ), typeof ( UITypeEditor ) ),
BrowseForFolderDescription ( "Select path to the base directory." )]
    public string BaseDirectory { get { return this._baseDir; } set { this._baseDir = value; } }
    /// <summary>
    /// Any command line arguments to pass in
    /// </summary>
    [Description ( "Any command line arguments to pass in." ), DefaultValue ( null ), Category ( "Optional" )]
    public string BuildArguments { get { return this._args; } set { this._args = value; } }
    /// <summary>
    /// Number of seconds to wait before assuming that the process has hung and should be killed.
    /// </summary>
    [Description ("Number of seconds to wait before assuming that the process has hung and should be killed."),
   DefaultValue ( null ), Category ( "Optional" )]
    public int? BuildTimeoutSeconds { get { return this._buildTimeoutSeconds; } set { this._buildTimeoutSeconds = value; } }

    /// <summary>
    /// Creates a copy of this object.
    /// </summary>
    /// <returns></returns>
    public override PublisherTask Clone () {
      return this.MemberwiseClone () as ExecutableTask;
    }

    /// <summary>
    /// Serializes this instance.
    /// </summary>
    /// <returns></returns>
    public override System.Xml.XmlElement Serialize() {
      XmlDocument doc = new XmlDocument ();
      XmlElement root = doc.CreateElement (this.TypeName);
      //root.SetAttribute ("ccnetconfigType", string.Format ("{0}, {1}", this.GetType ().FullName, this.GetType ().Assembly.GetName ().Name));

      root.SetAttribute ("executable", Util.CheckRequired (this, "executable", this.Executable));
      XmlElement ele = null;
      if ( !string.IsNullOrEmpty(this.BaseDirectory) ) {
        ele = doc.CreateElement ("baseDirectory");
        ele.InnerText = this.BaseDirectory;
        root.AppendChild (ele);
      }

      if ( !string.IsNullOrEmpty (this.BuildArguments) ) {
        ele = doc.CreateElement ("buildArgs");
        ele.InnerText = this.BuildArguments;
        root.AppendChild (ele);
      }

      if ( this.BuildTimeoutSeconds.HasValue ) {
        ele = doc.CreateElement ("buildTimeoutSeconds");
        ele.InnerText = this.BuildTimeoutSeconds.Value.ToString ();
        root.AppendChild (ele);
      }

      return root;
    }

    /// <summary>
    /// Deserializes the specified element.
    /// </summary>
    /// <param name="element">The element.</param>
    public override void Deserialize( XmlElement element ) {
      this.BaseDirectory = string.Empty;
      this.BuildArguments = string.Empty;
      this.BuildTimeoutSeconds = null;
      this._exe = string.Empty;

      if ( string.Compare (element.Name, this.TypeName, false) != 0 )
        throw new InvalidCastException (string.Format ("Unable to convert {0} to a {1}", element.Name, this.TypeName));

      this.Executable = Util.GetElementOrAttributeValue ("executable", element);

      string s = Util.GetElementOrAttributeValue ("baseDirectory", element);
      if ( !string.IsNullOrEmpty (s) )
        this.BaseDirectory = s;

      s = Util.GetElementOrAttributeValue ("buildArgs", element);
      if ( !string.IsNullOrEmpty (s) )
        this.BuildArguments = s;

      s = Util.GetElementOrAttributeValue ("buildTimeoutSeconds", element);
      if ( !string.IsNullOrEmpty (s) ) {
        int i = 0;
        if ( int.TryParse (s, out i) )
          this.BuildTimeoutSeconds = i;
      }

    }

    #region ICCNetDocumentation Members
    /// <summary>
    /// Gets the documentation URI.
    /// </summary>
    /// <value>The documentation URI.</value>
    [Browsable(false)]
    public Uri DocumentationUri {
      get { return new Uri ("http://confluence.public.thoughtworks.org/display/CCNET/Executable+Task?decorator=printable"); }
    }

    #endregion
  }
}
